/*
HeadHunter API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package github.com/zaboal/hh-go

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_github.com/zaboal/hh-go_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService AddApplicantComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicantId string

		resp, httpRes, err := apiClient.DefaultApi.AddApplicantComment(context.Background(), applicantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddEmployerManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.AddEmployerManager(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddEmployerToBlacklisted", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		httpRes, err := apiClient.DefaultApi.AddEmployerToBlacklisted(context.Background(), employerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddResumeVisibilityList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string
		var listType string

		httpRes, err := apiClient.DefaultApi.AddResumeVisibilityList(context.Background(), resumeId, listType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddVacancyToArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var vacancyId string

		httpRes, err := apiClient.DefaultApi.AddVacancyToArchive(context.Background(), employerId, vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddVacancyToBlacklisted", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		httpRes, err := apiClient.DefaultApi.AddVacancyToBlacklisted(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddVacancyToFavorite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		httpRes, err := apiClient.DefaultApi.AddVacancyToFavorite(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AddVacancyToHidden", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var vacancyId string

		httpRes, err := apiClient.DefaultApi.AddVacancyToHidden(context.Background(), employerId, vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApplyToVacancy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApplyToVacancy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Authorize", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.Authorize(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Authorize_1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.Authorize_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Authorize_2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.Authorize_1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ChangeVacancyDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var draftId string

		resp, httpRes, err := apiClient.DefaultApi.ChangeVacancyDraft(context.Background(), draftId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConfirmPhoneInResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ConfirmPhoneInResume(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateResume(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateSavedResumeSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateSavedResumeSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateSavedVacancySearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateSavedVacancySearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateVacancyDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CreateVacancyDraft(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteApplicantComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicantId string
		var commentId string

		httpRes, err := apiClient.DefaultApi.DeleteApplicantComment(context.Background(), applicantId, commentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.DeleteArtifact(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteEmployerFromBlacklisted", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		httpRes, err := apiClient.DefaultApi.DeleteEmployerFromBlacklisted(context.Background(), employerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteEmployerFromResumeVisibilityList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string
		var listType string

		httpRes, err := apiClient.DefaultApi.DeleteEmployerFromResumeVisibilityList(context.Background(), resumeId, listType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteEmployerManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		httpRes, err := apiClient.DefaultApi.DeleteEmployerManager(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		httpRes, err := apiClient.DefaultApi.DeleteResume(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteResumeVisibilityList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string
		var listType string

		httpRes, err := apiClient.DefaultApi.DeleteResumeVisibilityList(context.Background(), resumeId, listType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteSavedResumeSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.DeleteSavedResumeSearch(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteSavedVacancySearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.DeleteSavedVacancySearch(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteVacancyDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var draftId string

		httpRes, err := apiClient.DefaultApi.DeleteVacancyDraft(context.Background(), draftId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteVacancyFromBlacklisted", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		httpRes, err := apiClient.DefaultApi.DeleteVacancyFromBlacklisted(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteVacancyFromFavorite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		httpRes, err := apiClient.DefaultApi.DeleteVacancyFromFavorite(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DisableAutomaticVacancyPublication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.DisableAutomaticVacancyPublication(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EditArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.EditArtifact(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EditCurrentUserInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.EditCurrentUserInfo(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EditEmployerManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		httpRes, err := apiClient.DefaultApi.EditEmployerManager(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EditNegotiationMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nid string
		var mid string

		httpRes, err := apiClient.DefaultApi.EditNegotiationMessage(context.Background(), nid, mid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EditResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		httpRes, err := apiClient.DefaultApi.EditResume(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EditVacancy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		httpRes, err := apiClient.DefaultApi.EditVacancy(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetActiveVacancyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetActiveVacancyList(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetActiveVacancyList_3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetActiveVacancyList_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var addressId string

		resp, httpRes, err := apiClient.DefaultApi.GetAddress(context.Background(), employerId, addressId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetApplicantCommentsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicantId string

		resp, httpRes, err := apiClient.DefaultApi.GetApplicantCommentsList(context.Background(), applicantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetApplicantPhoneInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetApplicantPhoneInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetArchivedVacancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetArchivedVacancies(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetArchivedVacancies_4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetArchivedVacancies_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAreaLeavesSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAreaLeavesSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAreas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAreas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAreasFromSpecified", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var areaId string

		resp, httpRes, err := apiClient.DefaultApi.GetAreasFromSpecified(context.Background(), areaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAreasSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAreasSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetArtifactPhotos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetArtifactPhotos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetArtifactPhotosConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetArtifactPhotosConditions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetArtifactsPortfolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetArtifactsPortfolio(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetArtifactsPortfolioConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetArtifactsPortfolioConditions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAvailableUserStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAvailableUserStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAvailableUserStatuses_5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAvailableUserStatuses_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAvailableVacancyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		resp, httpRes, err := apiClient.DefaultApi.GetAvailableVacancyTypes(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetBlacklistedEmployers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetBlacklistedEmployers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetBlacklistedVacancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetBlacklistedVacancies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCountries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCurrentUserInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCurrentUserInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCurrentUserInfo_6", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCurrentUserInfo_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCurrentUserInfo_7", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCurrentUserInfo_1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCurrentUserInfo_8", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCurrentUserInfo_2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCurrentUserInfo_9", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCurrentUserInfo_3(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetDictionaries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetDictionaries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEducationalInstitutionsDictionary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetEducationalInstitutionsDictionary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEducationalInstitutionsSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetEducationalInstitutionsSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerAddresses(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerDepartments(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerDepartments_10", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerDepartments_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerInfo(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManager(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManagerLimits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManagerLimits(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManagerTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManagerTypes(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManagerTypes_11", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManagerTypes_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManager_12", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManager_0(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManagers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManagers(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerManagers_13", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerManagers_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEmployerVacancyAreas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetEmployerVacancyAreas(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFaculties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.GetFaculties(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFavoriteVacancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetFavoriteVacancies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFieldsOfStudySuggestions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetFieldsOfStudySuggestions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetHiddenVacancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetHiddenVacancies(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetHiddenVacancies_14", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetHiddenVacancies_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetIndustries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetIndustries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetLanguages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetLocales", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetLocales(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetLocalesForResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetLocalesForResume(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetMailTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetMailTemplates(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetManagerAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetManagerAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetManagerSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var managerId string

		resp, httpRes, err := apiClient.DefaultApi.GetManagerSettings(context.Background(), employerId, managerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetMetroStations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetMetroStations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetMetroStationsInCity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cityId int32

		resp, httpRes, err := apiClient.DefaultApi.GetMetroStationsInCity(context.Background(), cityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetMineResumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetMineResumes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetNewResumeConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetNewResumeConditions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetPayableApiActions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId int32

		resp, httpRes, err := apiClient.DefaultApi.GetPayableApiActions(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetPositionsSuggestions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetPositionsSuggestions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetPrefNegotiationsOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.GetPrefNegotiationsOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetProfessionalRolesDictionary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetProfessionalRolesDictionary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetProfessionalRolesSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetProfessionalRolesSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetProlongationVacancyInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetProlongationVacancyInfo(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetRegisteredCompaniesSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetRegisteredCompaniesSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResume(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeAccessTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeAccessTypes(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeConditions(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeCreationAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetResumeCreationAvailability(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeNegotiationsHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeNegotiationsHistory(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeSearchKeywordsSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetResumeSearchKeywordsSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeStatus(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeViewHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeViewHistory(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeVisibilityEmployersList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string
		var listType string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeVisibilityEmployersList(context.Background(), resumeId, listType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumeVisibilityList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string
		var listType string

		resp, httpRes, err := apiClient.DefaultApi.GetResumeVisibilityList(context.Background(), resumeId, listType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResume_15", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResume_0(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResume_16", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetResume_1(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetResumesByStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetResumesByStatus(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSalaryEmployeeLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSalaryEmployeeLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSalaryEvaluation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var areaId string

		resp, httpRes, err := apiClient.DefaultApi.GetSalaryEvaluation(context.Background(), areaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSalaryEvaluation_17", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var areaId string

		resp, httpRes, err := apiClient.DefaultApi.GetSalaryEvaluation_0(context.Background(), areaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSalaryIndustries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSalaryIndustries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSalaryProfessionalAreas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSalaryProfessionalAreas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSalarySalaryAreas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSalarySalaryAreas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSavedResumeSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.GetSavedResumeSearch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSavedResumeSearches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSavedResumeSearches(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSavedVacancySearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.GetSavedVacancySearch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSavedVacancySearches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSavedVacancySearches(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSkillSetSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSkillSetSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSkills", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetSkills(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSuitableResumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetSuitableResumes(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTestsDictionary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetTestsDictionary(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTestsDictionary_18", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetTestsDictionary_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetVacancies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacanciesSimilarToResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacanciesSimilarToResume(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacanciesSimilarToVacancy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacanciesSimilarToVacancy(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancy(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyBrandedTemplatesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyBrandedTemplatesList(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyBrandedTemplatesList_19", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyBrandedTemplatesList_0(context.Background(), employerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyConditions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var draftId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyDraft(context.Background(), draftId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyDraftList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyDraftList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyPositionsSuggests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyPositionsSuggests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancySearchKeywords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetVacancySearchKeywords(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyStats(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyUpgradeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyUpgradeList(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancyVisitors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancyVisitors(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetVacancy_20", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		resp, httpRes, err := apiClient.DefaultApi.GetVacancy_0(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService HideActiveResponse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nid string

		httpRes, err := apiClient.DefaultApi.HideActiveResponse(context.Background(), nid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService InvalidateToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.InvalidateToken(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService InvalidateToken_21", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.InvalidateToken_0(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService InvalidateToken_22", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.InvalidateToken_1(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService LoadArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.LoadArtifact(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MoveSavedResumeSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var savedSearchId string
		var managerId string

		httpRes, err := apiClient.DefaultApi.MoveSavedResumeSearch(context.Background(), savedSearchId, managerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PostNegotiationsTopicsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.PostNegotiationsTopicsRead(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PublishResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resumeId string

		httpRes, err := apiClient.DefaultApi.PublishResume(context.Background(), resumeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PublishVacancy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PublishVacancy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PublishVacancyFromDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var draftId string

		resp, httpRes, err := apiClient.DefaultApi.PublishVacancyFromDraft(context.Background(), draftId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutMailTemplatesItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var templateId string

		httpRes, err := apiClient.DefaultApi.PutMailTemplatesItem(context.Background(), employerId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutNegotiationsCollectionToNextState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string

		httpRes, err := apiClient.DefaultApi.PutNegotiationsCollectionToNextState(context.Background(), collection).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutPrefNegotiationsOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.PutPrefNegotiationsOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RestoreVacancyFromHidden", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var employerId string
		var vacancyId string

		httpRes, err := apiClient.DefaultApi.RestoreVacancyFromHidden(context.Background(), employerId, vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchEmployer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchEmployer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchForResumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchForResumes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchForVacancyDraftDuplicates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var draftId string

		resp, httpRes, err := apiClient.DefaultApi.SearchForVacancyDraftDuplicates(context.Background(), draftId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SendCodeForVerifyPhoneInResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SendCodeForVerifyPhoneInResume(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SendNegotiationMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nid string

		resp, httpRes, err := apiClient.DefaultApi.SendNegotiationMessage(context.Background(), nid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateApplicantComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicantId string
		var commentId string

		httpRes, err := apiClient.DefaultApi.UpdateApplicantComment(context.Background(), applicantId, commentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateSavedResumeSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.UpdateSavedResumeSearch(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateSavedVacancySearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.UpdateSavedVacancySearch(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService VacancyProlongation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vacancyId string

		httpRes, err := apiClient.DefaultApi.VacancyProlongation(context.Background(), vacancyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
